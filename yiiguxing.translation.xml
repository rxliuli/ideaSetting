<application>
  <component name="AppStorage">
    <histories>
      <item value="is Contain Ifself" />
      <item value="is Contain Ifset" />
      <item value=" contain itself" />
      <item value="Does it contain " />
      <item value="Does it contain itself" />
      <item value="是否包含本身" />
      <item value="ava.lang.Class cannot be cast to java.lang.Comparable" />
      <item value="Checked Sorted Set" />
      <item value="get Mini Parent" />
      <item value="最小公共" />
      <item value="最小公共父类型" />
      <item value="Super Class Ref Util" />
      <item value="Super Class Reflect Util" />
      <item value="反射" />
      <item value="Multiple Failure Exception" />
      <item value="Data Integrity Violation Exception" />
      <item value="Assertion Error" />
      <item value="PROPAGATION REQUIRED" />
      <item value="batch Insert For Exception" />
      <item value="is Greater Than" />
      <item value="问题" />
      <item value="org.springframework.expression.spel.SpelEvaluationException: EL1008E: Property or field 'userLogin' cannot be found on object of type 'org.springframework.cache.interceptor.CacheExpressionRootObject' - maybe not public?" />
      <item value="Assertions compatible with Android. Duplicated from {@link Assertions}." />
      <item value="have been split in {@link AssertionsForClassTypes} and {@link AssertionsForInterfaceTypes} * (see http://stackoverflow.com/questions/29499847/ambiguous-method-in-java-8-why)." />
      <item value="Assertions For Class Types" />
      <item value="Java 8 is picky when choosing the right &lt;code&gt;assertThat&lt;/code&gt; method if the object under test is generic and bounded, * for example if foo is instance of T that extends Exception, java 8 will complain that it can't resolve * the proper &lt;code&gt;assertThat&lt;/code&gt; method (normally &lt;code&gt;assertThat(Throwable)&lt;/code&gt; as foo might implement an interface like List, * if that occurred &lt;code&gt;assertThat(List)&lt;/code&gt; would also be a possible choice - thus confusing java 8." />
      <item value="Java 8 is picky when choosing the right &lt;code&gt;assertThat&lt;/code&gt; method if the object under test is generic and bounded, * for example if foo is instance of T that extends Exception, java 8 will complain that it can't resolve" />
      <item value="* &lt;p&gt;This annotation may be used as a &lt;em&gt;meta-annotation&lt;/em&gt; to create custom * &lt;em&gt;composed annotations&lt;/em&gt; with attribute overrides." />
      <item value="* &lt;p&gt;In contrast to the {@link Cacheable @Cacheable} annotation, this annotation * does not cause the advised method to be skipped. Rather, it always causes the * method to be invoked and its result to be stored in the associated cache. Note * that Java8's {@code Optional} return types are automatically handled and its * content is stored in the cache if present." />
      <item value="Annotation indicating that a method (or all methods on a class) triggers a" />
      <item value="after Properties Set" />
      <item value="Creates a new {@link Jackson2JsonRedisSerializer} for the given target {@link Class}." />
      <item value="Redis map specific operations working on a hash." />
      <item value="Default implementation of {@link HashOperations}." />
      <item value="Redis operations for simple (or in Redis terminology 'string') values." />
      <item value="put If Absent" />
      <item value="ops For Hash" />
      <item value="Value Operations" />
      <item value="key must not be {@literal null}." />
      <item value="Set the {@code value} of a hash {@code hashKey}." />
      <item value="Helper class that simplifies Redis data access code." />
      <item value="Returns the value serializer used by this template." />
      <item value="get Expire" />
      <item value="mk Array" />
      <item value="// results is for internal usage only" />
      <item value="results is for internal usage only" />
      <item value="source is null for getProperty(null, &quot;sqlSelect&quot;)" />
      <item value="get Property" />
      <item value="org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.builder.BuilderException: Error evaluating expression 'ew.sqlSelect'. Cause: org.apache.ibatis.ognl.OgnlException: source is null for getProperty(null, &quot;sqlSelect&quot;)" />
      <item value="org.apache.ibatis.builder.BuilderException: Error evaluating expression 'ew.sqlSelect'. Cause: org.apache.ibatis.ognl.OgnlException: source is null for getProperty(null, &quot;sqlSelect&quot;)" />
    </histories>
  </component>
</application>