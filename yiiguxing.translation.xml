<application>
  <component name="AppStorage">
    <histories>
      <item value="url Instruction Service" />
      <item value="unblock Domains Test" />
      <item value="Unsatisfied dependency expressed through field" />
      <item value="Consider the following: If you want an embedded database (H2, HSQL or Derby), please put it on the classpath. If you have database settings to be loaded from a particular profile you may need to activate it (no profiles are currently active)." />
      <item value="Reason: Failed to determine a suitable driver class" />
      <item value="The web application [ROOT] appears to have started a thread named [Abandoned connection cleanup thread] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:" />
      <item value="ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'logQueryControllerImpl': Unsatisfied dependency expressed through field 'logQueryService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'logQueryServiceImpl': Unsatisfied dependency expressed through field 'baseMapper'; nested exception is org.springframework.beans.factory" />
      <item value="Returns a sequential ordered stream whose elements are the specified values." />
      <item value="a {@code Spliterator.OfInt} describing the stream elements" />
      <item value="The spliterator is only traversed, split, or queried for estimated size * after the terminal operation of the stream pipeline commences." />
      <item value="Creates a new sequential or parallel {@code IntStream} from a * {@code Spliterator.OfInt}." />
      <item value="Returns an infinite sequential unordered stream where each element is * generated by the provided {@code Supplier}. This is suitable for * generating constant streams, streams of random elements, etc." />
      <item value="org.junit.ComparisonFailure: Expected :100L&#10;Actual :1L" />
      <item value="defined in class path resource [com/zx/idc/common/ftp/FtpSpringConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.zx.idc.common.ftp.FtpOperator]: Factory method 'basicFtpOperator' threw exception; nested exception is java.lang.RuntimeException: ftp operator create failed, config is null" />
      <item value="ftp operator create failed, config is null" />
      <item value="java.lang.IllegalStateException: Failed to load ApplicationContext" />
      <item value="Initial Bean sftpOperator failed, basic ftp client config is null!" />
      <item value="Initial Bean basicFtpOperator failed, basic ftp client config is null!" />
      <item value="Caught exception while allowing TestExecutionListener [org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@1cf56a1c] to prepare test instance [com.zx.idc.ds.base.cus.service.IBaseCustomerServiceTest@651aed93]" />
      <item value="Factory method 'basicFtpOperator' threw exception; nested exception is java.lang.RuntimeException: ftp operator create failed, config is null" />
      <item value="java.lang.IllegalStateException: Unable to find a @SpringBootConfiguration, you need to use @ContextConfiguration or @SpringBootTest(classes=...) with your test" />
      <item value="exists By Id" />
      <item value="Returns an array containing {@code Method} objects reflecting all the * public methods of the class or interface represented by this {@code * Class} object, including those declared by the class or interface and * those inherited from superclasses and superinterfaces." />
      <item value="Returns an array containing {@code Method} objects reflecting all the * declared methods of the class or interface represented by this {@code * Class} object, including public, protected, default (package) * access, and private methods, but excluding inherited methods." />
      <item value="get Declared Methods" />
      <item value="Returns an array of {@code Field} objects reflecting all the fields * declared by the class or interface represented by this * {@code Class} object. This includes public, protected, default * (package) access, and private fields, but excludes inherited fields." />
      <item value="get Declared Fields" />
      <item value="c.z.i.common.ftp.sftp.SftpSpringConfig : Read the sftp configuration exception, read the configuration: username null, host null, password null, port: Optional.empty, strictHostKeyChecking Optional.empty, encoding, Optional.empty" />
      <item value="Deprecated" />
      <item value="Read the ftp and sftp configuration exception, read the configuration: username null, host null, password null, port: Optional.empty" />
      <item value="Caught exception while allowing TestExecutionListener [org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@15d49048] to prepare test instance [com.zx.idc.common.ftp2.FtpSpringConfigTest@471a9022]" />
      <item value="Base Ftp Oerator Factory.get Instance" />
      <item value="Connection reset" />
      <item value="Returns an infinite sequential ordered {@code Stream} produced by iterative * application of a function {@code f} to an initial element {@code seed}, * producing a {@code Stream} consisting of {@code seed}, {@code f(seed)}, * {@code f(f(seed))}, etc." />
      <item value="The behavior of this operation is explicitly nondeterministic; it is * free to select any element in the stream. This is to allow for maximal * performance in parallel operations; the cost is that multiple invocations * on the same source may not return the same result. (If a stable result * is desired, use {@link #findFirst()} instead.)" />
      <item value="Returns an {@link Optional} describing some element of the stream, or an * empty {@code Optional} if the stream is empty." />
      <item value="Returns an {@link Optional} describing the first element of this stream, * or an empty {@code Optional} if the stream is empty. If the stream has * no encounter order, then any element may be returned." />
      <item value="Returns whether no elements of this stream match the provided predicate. * May not evaluate the predicate on all elements if not necessary for * determining the result. If the stream is empty then {@code true} is * returned and the predicate is not evaluated. *" />
      <item value="This method evaluates the &lt;em&gt;universal quantification&lt;/em&gt; of the * negated predicate over the elements of the stream (for all x ~P(x)). If * the stream is empty, the quantification is said to be vacuously satisfied * and is always {@code true}, regardless of P(x)." />
      <item value="This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;short-circuiting * terminal operation" />
      <item value="none" />
      <item value="Returns whether no elements of this stream match the provided predicate. * May not evaluate the predicate on all elements if not necessary for * determining the result. If the stream is empty then {@code true} is * returned and the predicate is not evaluated." />
      <item value="none Match" />
      <item value="the result type of the reduction operation" />
      <item value="the mutable accumulation type of the reduction operation (often * hidden as an implementation detail)" />
      <item value="the type of input elements to the reduction operation" />
      <item value="Performs a &lt;a href=&quot;package-summary.html#MutableReduction&quot;&gt;mutable * reduction&lt;/a&gt; operation on the elements of this stream. A mutable * reduction is one in which the reduced value is a mutable result container, * such as an {@code ArrayList}, and elements are incorporated by updating * the state of the result rather than by replacing the result. This * produces a result equivalent to:" />
      <item value="The {@code identity} value must be an identity for the combiner * function. This means that for all {@code u}, {@code combiner(identity, u)} * is equal to {@code u}. Additionally, the {@code combiner} function * must be compatible with the {@code accumulator} function; for all * {@code u} and {@code t}, the following must hold: * &lt;pre&gt;{@code * combiner.apply(u, accumulator.apply(identity, t)) == accumulator.apply(u, t)" />
      <item value="but is not constrained to execute sequentially." />
      <item value="Performs a &lt;a href=&quot;package-summary.html#Reduction&quot;&gt;reduction&lt;/a&gt; on the * elements of this stream, using the provided identity, accumulation and * combining functions. This is equivalent to:" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="507" />
        <entry key="ENGLISH" value="508" />
        <entry key="GERMAN" value="1" />
        <entry key="FRENCH" value="1" />
        <entry key="GALICIAN" value="1" />
        <entry key="CATALAN" value="1" />
        <entry key="CORSICAN" value="20" />
        <entry key="KURDISH" value="1" />
        <entry key="LATVIAN" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="MALAGASY" value="3" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="JAPANESE" value="2" />
        <entry key="SLOVENIAN" value="1" />
        <entry key="CEBUANO" value="1" />
        <entry key="GREEK" value="1" />
        <entry key="ITALIAN" value="1" />
      </map>
    </option>
  </component>
</application>