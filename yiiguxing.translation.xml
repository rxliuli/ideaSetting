<application>
  <component name="AppStorage">
    <option name="lastSourceLanguage" value="AUTO" />
    <option name="lastTargetLanguage" value="CHINESE" />
    <histories>
      <item value="declares multiple JSON fields named type" />
      <item value="this specifies which animal it is" />
      <item value="Define location with sdk.dir in the local.properties file or with an ANDROID_HOME environment variable." />
      <item value="com.google.gson.JsonParseException: cannot deserialize class com.rxliuli.demo.common.example.entity.Person subtype named rxliuli; did you forget to register a subtype?" />
      <item value="subtype named rxliuli; did you forget to register a subtype?" />
      <item value="because it does not define a field named type" />
      <item value="cannot deserialize class com.rxliuli.demo.common.serializable.Person" />
      <item value="Not a JSON Object:" />
      <item value="Employee" />
      <item value="Emp" />
      <item value="* distributed under the License is distributed on an &quot;AS IS&quot; BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License." />
      <item value="Unless required by applicable law or agreed to in writing, software" />
      <item value="test Deserialization From File" />
      <item value="Represents a supplier of results." />
      <item value="using" />
      <item value="serialization Dat" />
      <item value="deserialization Dat" />
      <item value="derialization Dat" />
      <item value="serialization" />
      <item value="Optional Data Exception" />
      <item value="format. Note that there is a * significant difference between writing a String into the stream as" />
      <item value="&lt;a href=&quot;DataInput.html#modified-utf-8&quot;&gt;modified UTF-8&lt;/a&gt;" />
      <item value="Primitive data write of this String in" />
      <item value="test Deserialization Dat" />
      <item value="test Derialization Dat" />
      <item value="test Derialization" />
      <item value="test Derializab" />
      <item value="XML Encoder" />
      <item value="XML Decoder" />
      <item value="test Deserialization XML" />
      <item value="反序列化" />
      <item value="test Serializable" />
      <item value="test Serial" />
      <item value="test Seria" />
      <item value="java.lang.InstantiationException: java.util.Arrays$ArrayList" />
      <item value="java.lang.Exception: XMLEncoder: discarding statement XMLEncoder.writeObject(Arrays$ArrayList); Continuing ..." />
      <item value="XMLEncoder: discarding statement XMLEncoder.writeObject(Arrays$ArrayList);" />
      <item value="use serialVersionUID from JDK 1.0.2 for interoperability" />
      <item value="版本" />
      <item value="Password Digest Util" />
      <item value="rd Digest Util" />
      <item value="Adds an intention to allow the conversion of '+' into Logger.info formats with '{}'." />
      <item value="Full featured forked version of plugin &quot;Log Support&quot; which is not maintained for a long time. This plugin supports creating and managing log calls. Once installed the plugin makes using log frameworks as painless as printing to stdout. This is achieved with the addition of intentions, live templates and code inspections that support the most important aspects of the configured log framework. Whenever you'd attempt to write to stdout using &quot;sout + TAB&quot; you can now use &quot;logd + TAB&quot; to write a debug log line instead (other log levels are accessible via similarly named live templates). The plugin is aware of loggers that are currently reachable from the context and can also add new loggers if none are reachable. Creating log output remains the same no matter what log framework is used as all operations inside the bundled live templates are performed using the framework that was previously defined for the current project scope. Log calls are validated and optionally wrapped in conditional expressions if this is desired. On top of the basic feature set, enterprise class features like log ID and log review generation are available to help improving the overall quality of the generated log." />
      <item value="context Birth" />
      <item value="File Appender" />
      <item value="appender" />
      <item value="Birth" />
      <item value="provided" />
      <item value="get Parameter" />
    </histories>
  </component>
</application>