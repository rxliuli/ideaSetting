<application>
  <component name="AppStorage">
    <histories>
      <item value="Field 'invitedCode' doesn't have a default value" />
      <item value="The error occurred while setting parameters" />
      <item value="is Dealer" />
      <item value="Caused by: org.yaml.snakeyaml.scanner.ScannerException: while scanning for the next token found character '`' that cannot start any token. (Do not use ` for indentation)" />
      <item value="Caused by: org.yaml.snakeyaml.composer.ComposerException: found undefined alias 60lw0MoRjb4 in 'reader', line 10, column 15: password: *60lw0MoRjb4" />
      <item value="exception will be logged (using {@link java.util.logging.Logger}) and swallowed&lt;/i&gt;. * * &lt;p&gt;Caches loaded by a {@link CacheLoader} will call {@link CacheLoader#reload} if the cache * currently contains a value for {@code key}, and {@link CacheLoader#load} otherwise. Loading is * asynchronous only if {@link CacheLoader#reload} was overridden with an asynchronous * implementation." />
      <item value="the previous value (if any) will continue to be returned by {@code get(key)} unless it is * evicted. If the new value is loaded successfully it will replace the previous value in the * cache; if an exception is thrown while refreshing the previous value will remain, &lt;i&gt;and the" />
      <item value="Loads a new value for key {@code key}, possibly asynchronously. While the new value is loading" />
      <item value="com.google.common.cache.CacheLoader$InvalidCacheLoadException: CacheLoader returned null for key" />
      <item value="Get user by user token failed" />
      <item value="Get user token failed" />
      <item value="Get user token serializable failed" />
      <item value="Returns the value associated with {@code key} in this cache, obtaining that value from {@code * loader} if necessary. The method improves upon the conventional &quot;if cached, return; otherwise * create, cache and return&quot; pattern. For further improvements, use {@link LoadingCache} and its * {@link LoadingCache#get(Object) get(K)} method instead of this one. *" />
      <item value="concurrency Level" />
      <item value="maximum Size" />
      <item value="uid" />
      <item value="MULTI STATUS" />
      <item value="MULTIPLE CHOICES" />
      <item value="concat" />
      <item value="org.springframework.web.multipart.MultipartException: Current request is not a multipart request" />
      <item value="ERROR org.springframework.boot.SpringApplication.reportFailure - Application startup faile" />
      <item value="Logback configuration error detected:" />
      <item value="or whenever the file size reaches" />
      <item value="相对" />
      <item value="custom" />
      <item value="costom" />
      <item value="Invalid bound statement (not found): com.rx.f3d.module.dao.user.UserTokenDao.updateById" />
      <item value="The token was expected to have 3 parts, but got 1." />
      <item value="com.rx.f3d.common.util.OAuthTokenUtil.verifyToken - token verify failed" />
      <item value="java.lang.AssertionError: Content type Expected :application/json;charset=UTF-8 Actual :text/html" />
      <item value="com.rx.f3d.common.web.JsonResult cannot be cast to java.lang.String" />
      <item value="java.lang.AssertionError: JSON path &quot;$.data.password&quot; Expected :12345678910 Actual :123456" />
      <item value="expected &quot;CHECK, REFERENCES, ,, )&quot;; SQL statement:" />
      <item value="Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource" />
      <item value="Unsatisfied dependency expressed through field 'tokenAuthInterceptor'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException:" />
      <item value="Expected" />
      <item value="Unsatisfied dependency expressed through field 'base'; nested exception is org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type 'java.lang.Object' available: expected single matching bean but found 3: systemEnvironment,contextParameters,contextAttributes" />
      <item value="exists" />
      <item value="The Token has expired on Thu Aug 16 18:15:42 CST 2018." />
      <item value="failed" />
      <item value="失败" />
      <item value="fiald" />
      <item value="faild" />
      <item value="作废" />
      <item value="com.auth0.jwt.exceptions.TokenExpiredException: The Token has expired on Thu Aug 16 16:57:16 CST 2018." />
      <item value="com.auth0.jwt.exceptions.InvalidClaimException: The Claim 'iss' value doesn't match the required one." />
      <item value="com.auth0.jwt.exceptions.AlgorithmMismatchException: The provided Algorithm doesn't match the one defined in the JWT's Header." />
      <item value="decode" />
      <item value="with Issued At" />
      <item value="with Issuer" />
    </histories>
  </component>
</application>