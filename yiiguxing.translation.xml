<application>
  <component name="AppStorage">
    <histories>
      <item value="tiny" />
      <item value="small" />
      <item value="smallint" />
      <item value="tinyint" />
      <item value="操作" />
      <item value="operation" />
      <item value="compile" />
      <item value="implementation" />
      <item value="An {@link ExecutorService} for running {@link ForkJoinTask}s. * A {@code ForkJoinPool} provides the entry point for submissions * from non-{@code ForkJoinTask} clients, as well as management and * monitoring operations." />
      <item value="additional nanoseconds to sleep" />
      <item value="nanos" />
      <item value="Returns a new CompletionStage that, when this stage completes * normally, is executed using this stage's default asynchronous * execution facility, with this stage's result as the argument to * the supplied function." />
      <item value="then Apply Async" />
      <item value="then Accept" />
      <item value="then Accept Async" />
      <item value="Implementing this interface allows an object to be the target of * the &quot;for-each loop&quot; statement. See" />
      <item value="Annotation to activate MongoDB repositories. If no base package is configured through either {@link #value()}, * {@link #basePackages()} or {@link #basePackageClasses()} it will trigger scanning of the package of annotated class." />
      <item value="Enable Mongo Repositories" />
      <item value="Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.zx.idc.ds.base.cus.mongodb.repository.UserInfoRepository' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}" />
      <item value="Caused by: org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type 'java.lang.Object' available: expected single matching bean but found 3: baseDao,baseMongoDao,systemEnvironment" />
      <item value="No qualifying bean of type 'com.zx.idc.ds.base.cus.mongodb.repository.UserInfoRepository' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}" />
      <item value="org.apache.ibatis.binding.BindingException: Invalid bound statement (not found): com.zx.idc.ds.base.cus.mongodb.dao.UserInfoRepository.findByName" />
      <item value="Creates a criterion using the {@literal $gte} operator." />
      <item value="Creates a criterion using a {@literal $regex} operator." />
      <item value="Creates a criterion using the given object as a pattern." />
      <item value="{@link Query} implementation to be used to for performing full text searches." />
      <item value="Custom {@link Query} implementation to setup a basic query from some arbitrary JSON query string." />
      <item value="by Example" />
      <item value="Interface that specifies a basic set of MongoDB operations. Implemented by {@link MongoTemplate}. Not often used but * a useful option for extensibility and testability (as it can be easily mocked, stubbed, or be the target of a JDK * proxy)." />
      <item value="集成 mongodb" />
      <item value="com.zaxxer.hikari.util.DriverDataSource : Registered driver with driverClassName=org.gjt.mm.mysql.Driver was not found, trying direct instantiation." />
      <item value="com.mongodb.MongoSocketOpenException: Exception opening socket" />
      <item value="Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'codeListServiceImpl': Unsatisfied dependency expressed through field 'baseMapper'" />
      <item value="Failed to determine a suitable driver class" />
      <item value="Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.zaxxer.hikari.HikariDataSource]: Factory method 'dataSource' threw exception; nested exception is org.springframework.boot.autoconfigure.jdbc.DataSourceProperties$DataSourceBeanCreationException: Failed to determine a suitable driver class" />
      <item value="Caused by: org.springframework.context.annotation.ConflictingBeanDefinitionException: Annotation-specified bean name 'commandServiceImpl' for bean class [com.zx.idc.ds.api.ws.management.Infosecurity.violationwebsite.monitor.service.impl.CommandServiceImpl] conflicts with existing, non-compatible bean definition of same name and class [com.zx.idc.ds.api.ws.management.Infosecurity.violationwebsite.filter.service.impl.CommandServiceImpl]" />
      <item value="com.mongodb.MongoCommandException: Command failed with error 13: 'command insert requires authentication'" />
      <item value="ZIP Compression Impl" />
      <item value="Not Compression Impl" />
      <item value="发布 Endpoint 成功 。注册到 Spring 容器中成功" />
      <item value="The package that needs to be scanned is not configured, Endpoint will not be published and registered" />
      <item value="The" />
      <item value="未配置需要扫描的包，Endpoint 将不会发布和注册" />
      <item value="Converter Factory" />
      <item value="Pascal" />
      <item value="Camel" />
      <item value="Returns a stream consisting of the remaining elements of this stream * after discarding the first {@code n} elements of the stream. * If this stream contains fewer than {@code n} elements then an * empty stream will be returned." />
      <item value="skip" />
      <item value="Pascal Case" />
      <item value="Lower Camel" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="673" />
        <entry key="ENGLISH" value="674" />
        <entry key="GERMAN" value="1" />
        <entry key="FRENCH" value="6" />
        <entry key="GALICIAN" value="1" />
        <entry key="CATALAN" value="1" />
        <entry key="CORSICAN" value="20" />
        <entry key="KURDISH" value="1" />
        <entry key="LATIN" value="2" />
        <entry key="LATVIAN" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="MALAGASY" value="3" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="JAPANESE" value="2" />
        <entry key="SLOVENIAN" value="2" />
        <entry key="CEBUANO" value="1" />
        <entry key="GREEK" value="1" />
        <entry key="ITALIAN" value="1" />
      </map>
    </option>
  </component>
</application>