<application>
  <component name="AppStorage">
    <histories>
      <item value="Issue the FTP STAT command to the server. * &lt;p&gt; * @return The status information returned by the server. * @exception FTPConnectionClosedException * If the FTP server prematurely closes the connection as a result * of the client being idle or some other reason causing the server * to send FTP reply code 421. This exception may be caught either * as an IOException or independently as itself." />
      <item value="The integer value of the reply code of the fetched FTP reply." />
      <item value="Only use this * method if you are implementing your own FTP client or if you need to * fetch a secondary response from the FTP server." />
      <item value="Fetches a reply from the FTP server and returns the integer reply * code. After calling this method, the actual reply text can be accessed * from either calling {@link #getReplyString getReplyString } or" />
      <item value="Issue the FTP STAT command to the server for a given pathname. This * should produce a listing of the file or directory." />
      <item value="&lt;p&gt;No delimiter is added before or after the list. * {@code null} elements and separator are treated as empty Strings (&quot;&quot;).&lt;/p&gt;" />
      <item value="Joins the elements of the provided varargs into a * single String containing the provided elements.&lt;/p&gt;" />
      <item value="Seporator" />
      <item value="Create a new {@code BeanDefinitionBuilder} used to construct a {@link GenericBeanDefinition}. * @param beanClass the {@code Class} of the bean that the definition is being created for" />
      <item value="Create a new {@code BeanDefinitionBuilder} used to construct a {@link GenericBeanDefinition}." />
      <item value="generic Bean Definition" />
      <item value="Implementation of BeanDefinitionRegistry interface" />
      <item value="register Bean Definition" />
      <item value="get Bean Definition" />
      <item value="Unsupported ftp type" />
      <item value="using" />
      <item value="Stat" />
      <item value="com.jcraft.jsch.SftpException: No such directory" />
      <item value="10. Changes from previous protocol versions The SSH File Transfer Protocol has changed over time, before it's standardization. The following is a description of the incompatible changes between different versions.&#10;10.1 Changes between versions 3 and 2 o The SSH_FXP_READLINK and SSH_FXP_SYMLINK messages were added. o The SSH_FXP_EXTENDED and SSH_FXP_EXTENDED_REPLY messages were added. o The SSH_FXP_STATUS message was changed to include fields `error message' and `language tag'.&#10;10.2 Changes between versions 2 and 1 o The SSH_FXP_RENAME message was added.&#10;10.3 Changes between versions 1 and 0 o Implementation changes, no actual protocol changes." />
      <item value="lstat" />
      <item value="plain" />
      <item value="linkplain" />
      <item value="Injection of autowired dependencies failed; nested exception is java.lang.IllegalStateException: TypeExcludeFilter class org.springframework.boot.test.context.filter.TestTypeExcludeFilter has not implemented equals" />
      <item value="Caught exception while allowing TestExecutionListener [org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@4313f5bc] to prepare test instance [com.zx.idc.common.ftp.sftp.SftpSpringConfigTest@6e4784bc]" />
      <item value="strict Host Key Checking" />
      <item value="Maps the specified &lt;code&gt;key&lt;/code&gt; to the specified * &lt;code&gt;value&lt;/code&gt; in this hashtable. Neither the key nor the * value can be &lt;code&gt;null&lt;/code&gt;. &lt;p&gt; * * The value can be retrieved by calling the &lt;code&gt;get&lt;/code&gt; method * with a key that is equal to the original key." />
      <item value="aps the specified &lt;code&gt;key&lt;/code&gt; to the specified * &lt;code&gt;value&lt;/code&gt; in this hashtable. Neither the key nor the * value can be &lt;code&gt;null&lt;/code&gt;. &lt;p&gt; * * The value can be retrieved by calling the &lt;code&gt;get&lt;/code&gt; method * with a key that is equal to the original key." />
      <item value="host" />
      <item value="Pipe closed" />
      <item value="the number of bytes copied, or -1 if &amp;gt; Integer.MAX_VALUE" />
      <item value="Copy bytes from an &lt;code&gt;InputStream&lt;/code&gt; to an * &lt;code&gt;OutputStream&lt;/code&gt;. * &lt;p&gt; * This method buffers the input internally, so there is no need to use a * &lt;code&gt;BufferedInputStream&lt;/code&gt;. * &lt;p&gt; * Large streams (over 2GB) will return a bytes copied value of * &lt;code&gt;-1&lt;/code&gt; after the copy has completed since the correct * number of bytes cannot be returned as an int. For large streams * use the &lt;code&gt;copyLarge(InputStream, OutputStream)&lt;/code&gt; method." />
      <item value="The channel is not connected" />
      <item value="The channel is not connecte" />
      <item value="com.jcraft.jsch.SftpException: Bad message" />
      <item value="com.jcraft.jsch.SftpException: No such file" />
      <item value="Permission denied" />
      <item value="rmdir" />
      <item value="operation" />
      <item value="is Connected" />
      <item value="com.jcraft.jsch.ChannelSftp cannot be cast to com.zx.idc.common.ftp.sftp.BasicChannelSftp" />
      <item value="Ls Entry" />
      <item value="Strict Host Key Checking" />
      <item value="Copyright (c) 2002-2018 ymnk, JCraft,Inc. All rights reserved. Redistribution and use in source and binary forms, with or without&#10;modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. 3. The names of the authors may not be used to endorse or promote products derived from this software without specific prior written permission." />
      <item value="Channel Sftp" />
      <item value="Basic" />
      <item value="where to read input from" />
      <item value="destination" />
      <item value="Read bytes from an input stream. * This implementation guarantees that it will read as many bytes * as possible before giving up; this may not always be the case for * subclasses of {@link InputStream}." />
      <item value="successful" />
      <item value="JSch open ssh session success" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="394" />
        <entry key="ENGLISH" value="395" />
        <entry key="GERMAN" value="1" />
        <entry key="FRENCH" value="1" />
        <entry key="GALICIAN" value="1" />
        <entry key="CATALAN" value="1" />
        <entry key="CORSICAN" value="20" />
        <entry key="KURDISH" value="1" />
        <entry key="LATVIAN" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="JAPANESE" value="2" />
        <entry key="SLOVENIAN" value="1" />
        <entry key="CEBUANO" value="1" />
        <entry key="GREEK" value="1" />
        <entry key="ITALIAN" value="1" />
      </map>
    </option>
  </component>
</application>