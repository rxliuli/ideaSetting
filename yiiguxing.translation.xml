<application>
  <component name="AppStorage">
    <histories>
      <item value="send Win Bet Record" />
      <item value="set Time Lengthen" />
      <item value="GAME STATU HAS ENDED" />
      <item value="calculation Prize Pool Allocation" />
      <item value="分配" />
      <item value="calculation Prize Pool" />
      <item value="phone Last Four" />
      <item value="后四位" />
      <item value="phone 后四位" />
      <item value="WRITE BIGDECIMAL AS PLAIN" />
      <item value="{@link com.fasterxml.jackson.core.JsonGenerator.Feature#WRITE_BIGDECIMAL_AS_PLAIN} instead * (using {@link ObjectWriter#with(com.fasterxml.jackson.core.JsonGenerator.Feature)})." />
      <item value="Feature that determines whether {@link java.math.BigDecimal} entries are * serialized using {@link java.math.BigDecimal#toPlainString()} to prevent * values to be written using scientific notation. *&lt;p&gt; * NOTE: since this feature typically requires use of * {@link com.fasterxml.jackson.core.JsonGenerator#writeNumber(String)} * it may cause compatibility problems since not all {@link com.fasterxml.jackson.core.JsonGenerator} * implementations support such mode of output: usually only text-based formats * support it. *&lt;p&gt; * Feature is disabled by default. * * @deprecated Since 2.5: use {@link com.fasterxml.jackson.core.JsonGenerator.Feature#WRITE_BIGDECIMAL_AS_PLAIN} instead * (using {@link ObjectWriter#with(com.fasterxml.jackson.core.JsonGenerator.Feature)})." />
      <item value="Feature is disabled by default." />
      <item value="* {@link com.fasterxml.jackson.core.JsonGenerator#writeNumber(String)} * it may cause compatibility problems since not all {@link com.fasterxml.jackson.core.JsonGenerator} * implementations support such mode of output: usually only text-based formats * support it." />
      <item value="NOTE: since this feature typically requires use of" />
      <item value="Feature that determines whether {@link java.math.BigDecimal} entries are * serialized using {@link java.math.BigDecimal#toPlainString()} to prevent * values to be written using scientific notation. *&lt;p&gt;" />
      <item value="count Bet Key By User Record And Team" />
      <item value="statu" />
      <item value="bet Key By Team" />
      <item value="Or, by using a builder accessible via static methods:" />
      <item value="Can also be used in Spring MVC, as the return value from a @Controller method:" />
      <item value="&lt;pre class=&quot;code&quot;&gt; * ResponseEntity&amp;lt;String&amp;gt; entity = template.getForEntity(&quot;http://example.com&quot;, String.class); * String body = entity.getBody(); * MediaType contentType = entity.getHeaders().getContentType(); * HttpStatus statusCode = entity.getStatusCode(); * &lt;/pre&gt;" />
      <item value="Extension of {@link HttpEntity} that adds a {@link HttpStatus} status code. * Used in {@code RestTemplate} as well {@code @Controller} methods." />
      <item value="3000000000" />
      <item value="结束" />
      <item value="寻找" />
      <item value="Prime" />
      <item value="素数检查" />
      <item value="Prime Check" />
      <item value="Rounding mode to round towards positive infinity. If the * result is positive, behaves as for {@code RoundingMode.UP}; * if negative, behaves as for {@code RoundingMode.DOWN}. Note * that this rounding mode never decreases the calculated value." />
      <item value="CEILING" />
      <item value="&lt;p&gt;The new {@link #divide(BigDecimal, RoundingMode)} method * should be used in preference to this legacy method." />
      <item value="* &lt;p&gt;The new {@link #divide(BigDecimal, RoundingMode)} method * should be used in preference to this legacy method." />
      <item value="Returns a {@code BigDecimal} whose value is {@code (this / * divisor)}, and whose scale is {@code this.scale()}. If * rounding must be performed to generate a result with the given * scale, the specified rounding mode is applied." />
      <item value="rounding mode to apply" />
      <item value="set Promotion Amount" />
      <item value="统计" />
      <item value="set Airdrop Prize Pool" />
      <item value="get Disbursement Amount Count" />
      <item value="set Disbursement Amount Count" />
      <item value="get Time Lengthen" />
      <item value="延长" />
      <item value="game Time Left Max Hours" />
      <item value="get Purchase Amount" />
      <item value="get Promotion Amount" />
      <item value="set Airdrop Amount" />
      <item value="update Batch Income" />
      <item value="get Dividend Amount" />
      <item value="sub" />
      <item value="Returns a {@code Collector} which applies an {@code int}-producing * mapping function to each input element, and returns summary statistics * for the resulting values." />
    </histories>
  </component>
</application>