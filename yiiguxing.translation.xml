<application>
  <component name="AppStorage">
    <histories>
      <item value="org.apache.tomcat.util.modeler.BaseModelMBean.invoke Exception invoking method createStandardContext" />
      <item value="ContainerBase.addChild: start: org.apache.catalina.LifecycleException:" />
      <item value="Free Marker Template Utils" />
      <item value="Bootstrap" />
      <item value="com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure" />
      <item value=". The driver has not received any packets from the server. at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) at sun.reflect.DelegatingConstructorAccessorImpl.__newInstance(DelegatingConstructorAccessorImpl.java:45) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45009) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45012) at java.lang.reflect.Constructor.newInstance(Constructor.java:423)" />
      <item value="ENGINE" />
      <item value="introduce" />
      <item value="introduceq" />
      <item value="intro" />
      <item value="介绍" />
      <item value="head Portrait" />
      <item value="头像" />
      <item value="produce" />
      <item value="Can't create database 'mytimelinedb'; database exists" />
      <item value="taglib" />
      <item value="/ oa / oa Notify / self" />
      <item value="splice Url" />
      <item value="get Algorithmid" />
      <item value="set Algorithm Name" />
      <item value="recursive Load Children" />
      <item value="export Children" />
      <item value="Base Transducer" />
      <item value="* @param &lt;T&gt; the type of element to be compared * @param &lt;U&gt; the type of the {@code Comparable} sort key * @param keyExtractor the function used to extract the {@link * Comparable} sort key * @return a comparator that compares by an extracted key * @throws NullPointerException if the argument is null" />
      <item value="* &lt;pre&gt;{@code * Comparator&lt;Person&gt; byLastName = Comparator.comparing(Person::getLastName); * }&lt;/pre&gt; *" />
      <item value="* For example, to obtain a {@code Comparator} that compares {@code * Person} objects by their last name," />
      <item value="* &lt;p&gt;The returned comparator is serializable if the specified function * is also serializable." />
      <item value="Accepts a function that extracts a {@link java.lang.Comparable * Comparable} sort key from a type {@code T}, and returns a {@code * Comparator&lt;T&gt;} that compares by that sort key." />
      <item value="comparing" />
      <item value="Multipart File" />
      <item value="product Name" />
      <item value="Unable to create directory" />
      <item value="macro" />
      <item value="compute Array List Capacity" />
      <item value="Gwt Compatible" />
      <item value="get Declared Fields" />
      <item value="CLASSIFICATION NODE" />
      <item value="实数" />
      <item value="* &lt;p&gt;&lt;code&gt;Null&lt;/code&gt; and empty String will return * &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; * * @param str the &lt;code&gt;String&lt;/code&gt; to check * @return &lt;code&gt;true&lt;/code&gt; if the string is a correctly formatted number * @since 3.3 the code supports hex {@code 0Xhhh} and octal {@code 0ddd} validation */" />
      <item value="* &lt;p&gt;Checks whether the String a valid Java number.&lt;/p&gt; * * &lt;p&gt;Valid numbers include hexadecimal marked with the &lt;code&gt;0x&lt;/code&gt; * qualifier, scientific notation and numbers marked with a type * qualifier (e.g. 123L).&lt;/p&gt;" />
      <item value="&gt;Checks whether the String a valid Java number.&lt;/p&gt;" />
      <item value="redirect To Current Node Page" />
      <item value="definitions" />
      <item value="Monitoring" />
      <item value="is Popup Window" />
      <item value="/** * Returns the empty immutable set. This set behaves and performs comparably * to {@link Collections#emptySet}, and is preferable mainly for consistency * and maintainability of your code. */ // Casting to any type is safe because the set will never hold any elements. @SuppressWarnings({&quot;unchecked&quot;}) public static &lt;E&gt; ImmutableSet&lt;E&gt; of() { return (ImmutableSet&lt;E&gt;) EmptyImmutableSet.INSTANCE; }" />
      <item value="Immutable Set" />
      <item value="guava" />
      <item value="comparison Operator" />
      <item value="比较操作符" />
    </histories>
  </component>
</application>