<application>
  <component name="AppStorage">
    <histories>
      <item value="load Extra Item" />
      <item value="reject" />
      <item value="pass" />
      <item value="'&lt;span class=&quot;input-group-btn&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-primary btn-flat&quot; onclick=&quot;searchData()&quot; &gt;搜索&lt;/button&gt;&lt;/span&gt;'" />
      <item value="use Permission" />
      <item value="check Permission" />
      <item value="session user permissions" />
      <item value="reduction" />
      <item value="recycle" />
      <item value="还原" />
      <item value="recyle" />
      <item value="recy" />
      <item value="Stream" />
      <item value="An object that may hold resources (such as file or socket handles) * until it is closed. The {@link #close()} method of an {@code AutoCloseable} * object is called automatically when exiting a {@code * try}-with-resources block for which the object has been declared in * the resource specification header. This construction ensures prompt * release, avoiding resource exhaustion exceptions and errors that * may otherwise occur." />
      <item value="load Audit" />
      <item value="radio Ned Audit" />
      <item value="show Edit Repo Cate Window" />
      <item value="&lt;p&gt;Note that the plain ServletException doesn't expose its root cause at all, * neither in the exception message nor in printed stack traces! While this might * be fixed in later Servlet API variants (which even differ per vendor for the * same API version), it is not reliably available on Servlet 2.4 (the minimum * version required by Spring 3.x), which is why we need to do it ourselves." />
      <item value="Subclass of {@link ServletException} that properly handles a root cause in terms * of message and stacktrace, just like NestedChecked/RuntimeException does." />
      <item value="advice hooks. * * @param request the incoming ServletRequest" />
      <item value="Actually implements the chain execution logic, utilizing" />
      <item value="unauthorized Url" />
      <item value="Called in all cases in a {@code finally} block even if {@link #preHandle preHandle} returns * {@code false} or if an exception is thrown during filter chain processing. Can be used for resource * cleanup if so desired." />
      <item value="Chain" />
      <item value="execute Chain" />
      <item value="Abstract base class that provides all standard Shiro request filtering behavior and expects * subclasses to implement configuration-specific logic (INI, XML, .properties, etc). * &lt;p/&gt;" />
      <item value="This {@code doFilter} implementation stores a request attribute for * &quot;already filtered&quot;, proceeding without filtering again if the * attribute is already there." />
      <item value="retain backwards compatibility" />
      <item value="noinspection deprecation" />
      <item value="Authorizing Realm" />
      <item value="Authentication Exception" />
      <item value="Has Any Permissions Tag" />
      <item value="show Tag Body" />
      <item value="do Credentials Match" />
      <item value="Requires the requesting user to be authenticated for the request to continue, and if they are not, forces the user * to login via by redirecting them to the {@link #setLoginUrl(String) loginUrl} you configure." />
      <item value="Form Authentication Filter" />
      <item value="is Login Submission" />
      <item value="execute Login" />
      <item value="Error during generated code invocation com.intellij.debugger.engine.evaluation.EvaluateException: Method threw 'java.lang.ClassCastException' exception." />
      <item value="active Menus Id" />
      <item value="to Precision" />
      <item value="to Fixed" />
      <item value="extra Container" />
      <item value="indicator Success Title" />
      <item value="indicator Error Title" />
      <item value="indicator Loading Title" />
      <item value="list Parent By User Id" />
      <item value="than" />
      <item value="longer" />
      <item value="Uncaught TypeError: Illegal invocation" />
    </histories>
  </component>
</application>