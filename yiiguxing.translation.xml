<application>
  <component name="AppStorage">
    <histories>
      <item value="A standard set of date periods units." />
      <item value="A field of date-time, such as month-of-year or hour-of-minute. * &lt;p&gt; * Date and time is expressed using fields which partition the time-line into something * meaningful for humans. Implementations of this interface represent those fields. * &lt;p&gt;" />
      <item value="A standard set of fields. * &lt;p&gt; * This set of fields provide field-based access to manipulate a date, time or date-time. * The standard set of fields can be extended by implementing {@link TemporalField}. * &lt;p&gt; * These fields are intended to be applicable in multiple calendar systems. * For example, most non-ISO calendar systems define dates as a year, month and day, * just with slightly different rules. * The documentation of each field explains how it operates. *" />
      <item value="The hour-of-day. * &lt;p&gt; * This counts the hour within the day, from 0 to 23. * This is the hour that would be observed on a standard 24-hour digital clock. * This field has the same meaning for all calendar systems. * &lt;p&gt; * When parsing this field it behaves equivalent to the following: * The value is validated in strict and smart mode but not in lenient mode. * The field is combined with {@code MINUTE_OF_HOUR}, {@code SECOND_OF_MINUTE} and * {@code NANO_OF_SECOND} to produce a {@code LocalTime}. * In lenient mode, any excess days are added to the parsed date, or * made available via {@link java.time.format.DateTimeFormatter#parsedExcessDays()}." />
      <item value="range" />
      <item value="Gets the set of units supported by this duration. * &lt;p&gt; * The supported units are {@link ChronoUnit#SECONDS SECONDS}, * and {@link ChronoUnit#NANOS NANOS}. * They are returned in the order seconds, nanos. * &lt;p&gt; * This set can be used in conjunction with {@link #get(TemporalUnit)} * to access the entire state of the duration." />
      <item value="Gets the set of units supported by this duration." />
      <item value="Gets the value of the requested unit. * &lt;p&gt; * This returns a value for each of the two supported units, * {@link ChronoUnit#SECONDS SECONDS} and {@link ChronoUnit#NANOS NANOS}. * All other units throw an exception. * * @param unit the {@code TemporalUnit} for which to return the value * @return the long value of the unit * @throws DateTimeException if the unit is not supported * @throws UnsupportedTemporalTypeException if the unit is not supported" />
      <item value="Unsupported unit: Hours" />
      <item value="org.springframework.dao.EmptyResultDataAccessException: Incorrect result size: expected 1, actual 0" />
      <item value="org.springframework.dao.TransientDataAccessResourceException: PreparedStatementCallback; SQL [select * from user where id = #{id}]; Parameter index out of range (1 &gt; number of parameters, which is 0).; nested exception is java.sql.SQLException: Parameter index out of range (1 &gt; number of parameters, which is 0)." />
      <item value="Failed to execute SQL script statement" />
      <item value="Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory" />
      <item value="Failed to load ApplicationContext" />
      <item value="Here for backwards compatibility with MM.MySQL" />
      <item value="Chrono Unit" />
      <item value="A standard set of date periods units. * &lt;p&gt;" />
      <item value="更大" />
      <item value="This returns a {@code ChronoLocalDateTime} formed from this date at the specified time. * All possible combinations of date and time are valid." />
      <item value="Combines this date with a time to create a {@code ChronoLocalDateTime}." />
      <item value="at Time" />
      <item value="minus" />
      <item value="put If Absent" />
      <item value="Web Socket Annotation Method Message Handler" />
      <item value="Web Socket Stomp Client" />
      <item value="Sub Protocol Handler" />
      <item value="Stomp Sub Protocol Error Handler" />
      <item value="Session Unsubscribe Event" />
      <item value="Session Subscribe Event" />
      <item value="Default Simp User Registry" />
      <item value="Abstract Sub Protocol Event" />
      <item value="Session Disconnect Event" />
      <item value="A connected event represents the server response to a client's connect request. * See {@link org.springframework.web.socket.messaging.SessionConnectEvent}. *" />
      <item value="Event raised when a new WebSocket client using a Simple Messaging Protocol * (e.g. STOMP) as the WebSocket sub-protocol issues a connect request. *" />
      <item value="STOMP Connect Event Listener" />
      <item value="Copy On Write Array Set" />
      <item value="get Native Header" />
      <item value="login get from browser" />
      <item value="on Application Event" />
      <item value="Custom Hand Shake Interceptor" />
      <item value="/** * Send a message to the given user. * @param user the user that should receive the message. * @param destination the destination to send the message to. * @param payload the payload to send */" />
      <item value="scheduled Broadcasting" />
      <item value="Unidirectional Broadcasting Socket" />
      <item value="Incorrect column count: expected 1, actual 4" />
      <item value="org . springframework . jdbc . Incorrect Result Set Column Count Exception" />
      <item value="scheduled Push" />
      <item value="scheduled" />
      <item value="broadcasting" />
      <item value="enable Simple Broker" />
      <item value="Broker" />
    </histories>
  </component>
</application>