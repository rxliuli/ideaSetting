<application>
  <component name="AppStorage">
    <option name="lastSourceLanguage" value="AUTO" />
    <option name="lastTargetLanguage" value="CHINESE" />
    <histories>
      <item value="Password Digest Util" />
      <item value="rd Digest Util" />
      <item value="Adds an intention to allow the conversion of '+' into Logger.info formats with '{}'." />
      <item value="Full featured forked version of plugin &quot;Log Support&quot; which is not maintained for a long time. This plugin supports creating and managing log calls. Once installed the plugin makes using log frameworks as painless as printing to stdout. This is achieved with the addition of intentions, live templates and code inspections that support the most important aspects of the configured log framework. Whenever you'd attempt to write to stdout using &quot;sout + TAB&quot; you can now use &quot;logd + TAB&quot; to write a debug log line instead (other log levels are accessible via similarly named live templates). The plugin is aware of loggers that are currently reachable from the context and can also add new loggers if none are reachable. Creating log output remains the same no matter what log framework is used as all operations inside the bundled live templates are performed using the framework that was previously defined for the current project scope. Log calls are validated and optionally wrapped in conditional expressions if this is desired. On top of the basic feature set, enterprise class features like log ID and log review generation are available to help improving the overall quality of the generated log." />
      <item value="context Birth" />
      <item value="File Appender" />
      <item value="appender" />
      <item value="Birth" />
      <item value="provided" />
      <item value="get Parameter" />
    </histories>
  </component>
</application>