<application>
  <component name="AppStorage">
    <histories>
      <item value="Error during generated code invocation com.intellij.debugger.engine.evaluation.EvaluateException: Type mismatch Can't assign com.yh.ss.modules.cargo.web.CargoInfoModifyController$$M$_jr_135CC325F026874C_5 to com.yh.ss.modules.cargo.web.CargoInfoModifyController" />
      <item value="collect" />
      <item value="Collectors" />
      <item value="o.a.a.t.f.FailoverTransport - Transport (tcp://117.78.46.235:61616) failed , attempting to automatically reconnect: {}" />
      <item value="[HY000][1267] Illegal mix of collations (utf8_general_ci,IMPLICIT) and (utf8_hungarian_ci,IMPLICIT) for operation '='" />
      <item value="plane Type" />
      <item value="get Cost Weight" />
      <item value="get Unique Match Data" />
      <item value="cbyc Trans Price Service" />
      <item value="Trans" />
      <item value="Trans Price" />
      <item value="cbyc Trans Price" />
      <item value="calculate" />
      <item value="serial Version UID" />
      <item value="847312526268490482 L" />
      <item value="gzyh" />
      <item value="pc cbyc trans price" />
      <item value="auto-generated definition" />
      <item value="end Station" />
      <item value="null" />
      <item value="tno" />
      <item value="no" />
      <item value="prefetch Size" />
      <item value="totla Fee" />
      <item value="get Applyprice" />
      <item value="plane" />
      <item value="Compares this string to the specified object. The result is {@code * true} if and only if the argument is not {@code null} and is a {@code * String} object that represents the same sequence of characters as this * object." />
      <item value="Compares this string to the specified {@code StringBuffer}. The result * is {@code true} if and only if this {@code String} represents the same * sequence of characters as the specified {@code StringBuffer}. This method * synchronizes on the {@code StringBuffer}." />
      <item value="get Flight" />
      <item value="determine For HY" />
      <item value="set Interflag" />
      <item value="get Type By 3 Code" />
      <item value="session" />
      <item value="create Producer" />
      <item value="preserve All Tokens" />
      <item value="split Worker" />
      <item value="container Factory" />
      <item value="&lt;p&gt;A {@code CountDownLatch} is a versatile synchronization tool * and can be used for a number of purposes. A * {@code CountDownLatch} initialized with a count of one serves as a * simple on/off latch, or gate: all threads invoking {@link #await await} * wait at the gate until it is opened by a thread invoking {@link * #countDown}. A {@code CountDownLatch} initialized to &lt;em&gt;N&lt;/em&gt; * can be used to make one thread wait until &lt;em&gt;N&lt;/em&gt; threads have * completed some action, or some action has been completed N times." />
      <item value="A {@code CountDownLatch} is initialized with a given &lt;em&gt;count&lt;/em&gt;. * The {@link #await await} methods block until the current count reaches * zero due to invocations of the {@link #countDown} method, after which * all waiting threads are released and any subsequent invocations of * {@link #await await} return immediately. This is a one-shot phenomenon * -- the count cannot be reset. If you need a version that resets the * count, consider using a {@link CyclicBarrier}." />
      <item value="&lt;a href=&quot;package-summary.html#MemoryVisibility&quot;&gt;&lt;i&gt;happen-before&lt;/i&gt;&lt;/a&gt; * actions following a successful return from a corresponding" />
      <item value="Memory consistency effects: Until the count reaches * zero, actions in a thread prior to calling" />
      <item value="Count Down Latch" />
      <item value="acknowledge" />
      <item value="手动" />
      <item value="Decrements the count of the latch, releasing all waiting threads if * the count reaches zero." />
      <item value="release Shared" />
      <item value="WARN 11220 --- [ntainer#0-0-C-1] o.a.k.c.c.internals.ConsumerCoordinator : Auto offset commit failed for group consumer-group-rxliuli: Commit cannot be completed since the group has already rebalanced and assigned the partitions to another member. This means that the time between subsequent calls to poll() was longer than the configured max.poll.interval.ms, which typically implies that the poll loop is spending too much time message processing. You can address this either by increasing the session timeout or by reducing the maximum size of batches returned in poll() with max.poll.records." />
      <item value="coordinator" />
      <item value="** * A synchronization aid that allows one or more threads to wait until * a set of operations being performed in other threads completes." />
      <item value="step" />
    </histories>
  </component>
  <component name="Settings">
    <option name="googleTranslateSettings">
      <google-translate>
        <option name="useTranslateGoogleCom" value="true" />
      </google-translate>
    </option>
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="5e2600b87bd0fc78" />
        <option name="appKeyConfigured" value="true" />
      </youdao-translate>
    </option>
  </component>
</application>