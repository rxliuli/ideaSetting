<application>
  <component name="AppStorage">
    <histories>
      <item value="get All Declared Field" />
      <item value="gender" />
      <item value="职务" />
      <item value="薪水" />
      <item value="grade" />
      <item value="老师" />
      <item value="员工" />
      <item value="Employ" />
      <item value="override" />
      <item value="same" />
      <item value="oper Name" />
      <item value="Corporation" />
      <item value="Corp" />
      <item value="company Corporation" />
      <item value="n" />
      <item value="监听目录变化调度任务发生异常" />
      <item value="Failed to instantiate [com.zx.idc.common.ftp.FtpOperator]: Factory method 'sftpOperator' threw exception; nested exception is java.lang.RuntimeException: 2: File does not exist" />
      <item value="File does not exist" />
      <item value="sql Select" />
      <item value="Company" />
      <item value="Base Oper Company" />
      <item value="hold" />
      <item value="Shold" />
      <item value="人员信息" />
      <item value="get Bound Sql" />
      <item value="Cause: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'ew' in 'class com.zx.idc.ds.base.cus.entity.BaseCustomer'" />
      <item value="Tests if this input stream supports the &lt;code&gt;mark&lt;/code&gt; and * &lt;code&gt;reset&lt;/code&gt; methods. Whether or not &lt;code&gt;mark&lt;/code&gt; and * &lt;code&gt;reset&lt;/code&gt; are supported is an invariant property of a * particular input stream instance. The &lt;code&gt;markSupported&lt;/code&gt; method * of &lt;code&gt;InputStream&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;." />
      <item value="mark Supported" />
      <item value="Pipe closed" />
      <item value="Put file failed" />
      <item value="(The system cannot find the file specified)" />
      <item value="Returns the integer value of the reply code of the last FTP reply. * You will usually only use this method after you connect to the * FTP server to check that the connection was successful since * &lt;code&gt; connect &lt;/code&gt; is of type void." />
      <item value="enter Local Passive Mode" />
      <item value="connection is closed by foreign host" />
      <item value="sftp get operation failed: {}" />
      <item value="小于" />
      <item value="If not already completed, completes this CompletableFuture with * a {@link CancellationException}. Dependent CompletableFutures * that have not already completed will also complete * exceptionally, with a {@link CompletionException} caused by * this {@code CancellationException}." />
      <item value="this value has no effect in this * implementation because interrupts are not used to control * processing." />
      <item value="现在的时间" />
      <item value="循环中" />
      <item value="before" />
      <item value="completed" />
      <item value="while' statement cannot complete without throwing an exception less... (Ctrl+F1) Reports for, while, or do statements which can only exit by throwing an exception. While such statements may be correct, they are often a symptom of coding errors" />
      <item value="Caused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'ew' in 'class com.zx.idc.ds.base.cus.entity.BaseCustomer'" />
      <item value="Error querying database. Cause: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'ew' in 'class com.zx.idc.ds.base.cus.entity.BaseCustomer'" />
      <item value="Persistence Exception" />
      <item value="Caused by: org.apache.ibatis.exceptions.PersistenceException:" />
      <item value="Error: Cannot execute insertBatch Method. Cause" />
      <item value="Caused by: org.apache.ibatis.exceptions.PersistenceException: ### Error querying database. Cause: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'ew' in 'class com.zx.idc.ds.base.cus.entity.BaseCustomer'" />
      <item value="Preserving stability for {@code distinct()} in parallel pipelines is * relatively expensive (requires that the operation act as a full barrier, * with substantial buffering overhead), and stability is often not needed. * Using an unordered stream source (such as {@link #generate(Supplier)}) * or removing the ordering constraint with {@link #unordered()} may result * in significantly more efficient execution for {@code distinct()} in parallel * pipelines, if the semantics of your situation permit. If consistency * with encounter order is required, and you are experiencing poor performance * or memory utilization with {@code distinct()} in parallel pipelines, * switching to sequential execution with {@link #sequential()} may improve * performance." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="809" />
        <entry key="ENGLISH" value="810" />
        <entry key="GERMAN" value="1" />
        <entry key="FRENCH" value="6" />
        <entry key="GALICIAN" value="1" />
        <entry key="CATALAN" value="1" />
        <entry key="CORSICAN" value="20" />
        <entry key="KURDISH" value="1" />
        <entry key="LATIN" value="2" />
        <entry key="LATVIAN" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="MALAGASY" value="3" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="JAPANESE" value="2" />
        <entry key="SLOVENIAN" value="2" />
        <entry key="CEBUANO" value="1" />
        <entry key="GREEK" value="1" />
        <entry key="ITALIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>