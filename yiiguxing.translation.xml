<application>
  <component name="AppStorage">
    <histories>
      <item value="gender female" />
      <item value="gender frmale" />
      <item value="gender 女" />
      <item value="gender male" />
      <item value="gender 男" />
      <item value="### Error querying database. Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'tenant_id' in 'where clause'" />
      <item value="Unknown column 'tenant_id' in 'where clause' at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) at java.lang.reflect.Constructor.newInstance(Constructor.java:423)" />
      <item value="realname" />
      <item value="get Tenant Id" />
      <item value="bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'tenant_id' in 'field list'" />
      <item value="Tenant Sql Parser" />
      <item value="tenant id" />
      <item value="Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder(); builder.serializationInclusion(JsonInclude.Include.NON_NULL); ObjectMapper objectMapper = builder.build(); SimpleModule simpleModule = new SimpleModule(); simpleModule.addSerializer(Long.class, ToStringSerializer.instance); objectMapper.registerModule(simpleModule); objectMapper.configure(MapperFeature.PROPAGATE_TRANSIENT_MARKER, true);// 忽略 transient 修饰的属性 converters.add(new MappingJackson2HttpMessageConverter(objectMapper)); super.configureMessageConverters(converters);" />
      <item value="configure Message Converters" />
      <item value="1000214927827877890" />
      <item value="injector" />
      <item value="Logic Sql Injector" />
      <item value="org.apache.ibatis.reflection.ReflectionException: Could not set property 'id' of 'class com.rxliuli.example.springbootexample.entity.UserLogin' with value '5844e564ad55417caf905c94b768c3a7' Cause: java.lang.IllegalArgumentException: argument type mismatch" />
      <item value="Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Column 'id' specified twice" />
      <item value="### The error occurred while setting parameters ### SQL: INSERT INTO user_login (id, username, password, email, id) VALUES (?, ?, ?, ?, 1)" />
      <item value="{com.rxliuli.example.springbootexample.mapper.UserLoginMapper.deleteById} Has been loaded by XML or SqlProvider, ignoring the injection of the SQL." />
      <item value="INSERT INTO user_login (id, username, password, email, id) VALUES (?, ?, ?, ?, 1) ### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Column 'id' specified twice ; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Column 'id' specified twice" />
      <item value="### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Column 'id' specified twice ; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Column 'id' specified twice" />
      <item value="### The error may involve defaultParameterMap ### The error occurred while setting parameters" />
      <item value="### Error updating database. Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Column 'id' specified twice" />
      <item value="Request processing failed; nested exception is org.springframework.jdbc.BadSqlGrammarException:" />
      <item value="nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Column 'id' specified twice" />
      <item value="{com.rxliuli.example.springbootexample.mapper.UserLoginMapper.updateById} Has been loaded by XML or SqlProvider, ignoring the injection of the SQL." />
      <item value="H2 Sequence" />
      <item value="H 2 Key Generator" />
      <item value="set Tenant Handler" />
      <item value="get Tenant Id Column" />
      <item value="Error querying database. Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'tenant_id' in 'where clause'" />
      <item value="org.apache.ibatis.binding.BindingException: Invalid bound statement (not found): com.rxliuli.example.springbootexample.mapper.UserLoginMapper.selectList" />
      <item value="org.apache.ibatis.builder.IncompleteElementException: Could not find SQL statement to include with refid 'com.rxliuli.example.springbootexample.mapper.UserLoginMapper.base-column-list'" />
      <item value="validate" />
      <item value="constraint violations or an empty set if none" />
      <item value="the group or list of groups targeted for validation (defaults to" />
      <item value="alidates all constraints on {@code object}." />
      <item value="a negative integer, zero, or a positive integer as &lt;code&gt;lhs&lt;/code&gt; * is less than, equal to, or greater than &lt;code&gt;rhs&lt;/code&gt;" />
      <item value="If both &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; are &lt;code&gt;null&lt;/code&gt;, * they are considered equal.&lt;/p&gt;" />
      <item value="Static fields will not be compared&lt;/li&gt; * &lt;li&gt;Transient members will be not be compared, as they are likely derived * fields&lt;/li&gt; * &lt;li&gt;Superclass fields will be compared&lt;/li&gt; * &lt;/ul&gt;" />
      <item value="Fields can be private, thus &lt;code&gt;AccessibleObject.setAccessible&lt;/code&gt; * is used to bypass normal access control checks. This will fail under a * security manager unless the appropriate permissions are set.&lt;/p&gt;" />
      <item value="Compares two &lt;code&gt;Object&lt;/code&gt;s via reflection." />
      <item value="validata" />
      <item value="All Args Constructor" />
      <item value="* Generates a constructor with required arguments. * Required arguments are final fields and fields with constraints such as {@code @NonNull}. * &lt;p&gt; * Complete documentation is found at &lt;a href=&quot;https://projectlombok.org/features/Constructor&quot;&gt;the project lombok features page for &amp;#64;Constructor&lt;/a&gt;. * &lt;p&gt; * Even though it is not listed, this annotation also has the {@code onConstructor} parameter. See the full documentation for more details." />
      <item value="Required Args Constructor" />
      <item value="Index of all roles in Goto Class... Index of all properties in Goto Symbol... Reference Jinja2 variable declaration Reference to role declaraion Various completions Documentation looku" />
      <item value="Amazon AWS CloudFormation language support Open any *.template, *.json or *.yaml file with CloudFormation language inside. There should be number of features available:" />
    </histories>
  </component>
</application>