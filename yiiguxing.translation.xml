<application>
  <component name="AppStorage">
    <histories>
      <item value="Calls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function. * @param thisArg The object to be used as the this object. * @param argArray A set of arguments to be passed to the function." />
      <item value="form Util" />
      <item value="forms" />
      <item value="form" />
      <item value="empty To Else" />
      <item value="empty Or Else" />
      <item value="empty To Zero" />
      <item value="from" />
      <item value="data" />
      <item value="Invoke the handler method with the given argument values." />
      <item value="search confirm" />
      <item value="first" />
      <item value="bill Confirm And Generate Inland Sales Report" />
      <item value="生成" />
      <item value="bill Confirm And Grenertor" />
      <item value="账单确认并生成销售报告" />
      <item value="For more details see &lt;code&gt;PropertyUtilsBean&lt;/code&gt;.&lt;/p&gt;" />
      <item value="&lt;p&gt;Copy property values from the &quot;origin&quot; bean to the &quot;destination&quot; bean * for all cases where the property names are the same (even though the * actual getter and setter methods might have been customized via * &lt;code&gt;BeanInfo&lt;/code&gt; classes).&lt;/p&gt;" />
      <item value="if the object is cloneable and the clone operation fails" />
      <item value="fails" />
      <item value="the clone if the object implements {@link Cloneable} otherwise {@code null}" />
      <item value="obj the object to clone, null returns null" />
      <item value="the type of the object" />
      <item value="Clone an object" />
      <item value="clone If Possible" />
      <item value="policy Id" />
      <item value="bytotalweight" />
      <item value="get Bill Pi" />
      <item value="connection holder is null ; uncategorized SQLException for SQL []; SQL state [null]; error code [0]; connection holder is null" />
      <item value="si Sale Promo Billing Dao" />
      <item value="A PropertyDescriptor describes one property that a Java Bean * exports via a pair of accessor methods." />
      <item value="get Property Descriptors" />
      <item value="Copy the property values of the given source bean into the target bean. * &lt;p&gt;Note: The source and target classes do not have to match or even be derived * from each other, as long as the properties match. Any bean properties that the * source bean exposes but the target bean does not will silently be ignored. * &lt;p&gt;This is just a convenience method. For more complex transfer needs, * consider using a full BeanWrapper." />
      <item value="* Static convenience methods for JavaBeans: for instantiating beans, * checking bean property types, copying bean properties, etc. * * &lt;p&gt;Mainly for use within the framework, but to some degree also * useful for application classes." />
      <item value="Static convenience methods for JavaBeans: for instantiating beans, * checking bean property types, copying bean properties, etc. * * &lt;p&gt;Mainly for use within the framework, but to some degree also * useful for application classes." />
      <item value="account Period" />
      <item value="prompt" />
      <item value="inter Back Fee Data Table" />
      <item value="Copy the property values of the given source bean into the given target bean. * &lt;p&gt;Note: The source and target classes do not have to match or even be derived * from each other, as long as the properties match. Any bean properties that the * source bean exposes but the target bean does not will silently be ignored." />
      <item value="source the source bean" />
      <item value="consider using a full BeanWrapper." />
      <item value="Copy the property values of the given source bean into the target bean. * &lt;p&gt;Note: The source and target classes do not have to match or even be derived * from each other, as long as the properties match. Any bean properties that the * source bean exposes but the target bean does not will silently be ignored. * &lt;p&gt;This is just a convenience method. For more complex transfer needs," />
      <item value="get Applyprice" />
      <item value="Could not load [java.lang.Object]. The following stack trace is thrown for debugging purposes as well as to attempt to terminate the thread which caused the illegal access" />
      <item value="* &lt;p&gt;Removes control characters (char &amp;lt;= 32) from both * ends of this String returning {@code null} if the String is * empty (&quot;&quot;) after the trim or if it is {@code null}." />
      <item value="&gt;Removes control characters (char &amp;lt;= 32) from both * ends of this String returning {@code null} if the String is * empty (&quot;&quot;) after the trim or if it is {@code null}." />
      <item value="Strips whitespace from the start and end of a String returning" />
      <item value="strip To Null" />
      <item value="&lt;p&gt;Removes control characters (char &amp;lt;= 32) from both * ends of this String returning {@code null} if the String is * empty (&quot;&quot;) after the trim or if it is {@code null}." />
      <item value="accumulate Totalfee" />
    </histories>
  </component>
  <component name="Settings">
    <option name="googleTranslateSettings">
      <google-translate>
        <option name="useTranslateGoogleCom" value="true" />
      </google-translate>
    </option>
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="5e2600b87bd0fc78" />
        <option name="appKeyConfigured" value="true" />
      </youdao-translate>
    </option>
  </component>
</application>