<application>
  <component name="AppStorage">
    <histories>
      <item value="get Generic Superclass" />
      <item value="get Type Params" />
      <item value="Return the contained value, if present, otherwise throw an exception * to be created by the provided supplier." />
      <item value="Basic Data Monitor Error" />
      <item value="Basic Data Monitor Abnormalities" />
      <item value="监测异常" />
      <item value="Idc Info Manage" />
      <item value="Code List Service" />
      <item value="No corresponding converter found" />
      <item value="get Instance" />
      <item value="Screaming" />
      <item value="Concurrent Skip List Set" />
      <item value="没有找到相应的转换器" />
      <item value="com.mongodb.MongoSocketOpenException: Exception opening socket" />
      <item value="implementation that obtains an already available value." />
      <item value="Creates a 'nor' criteria using the $nor operator for all of the provided criteria. * &lt;p&gt; * Note that mongodb doesn't support an $nor operator to be wrapped in a $not operator. * &lt;p&gt; *" />
      <item value="Creates a 'nor' criteria using the $nor operator for all of the provided criteria. * &lt;p&gt; * Note" />
      <item value="Checks the given objects for equality. Handles {@link Pattern} and arrays correctly." />
      <item value="Creates an 'and' criteria using the $and operator for all of the provided criteria. * &lt;p&gt; * Note that mongodb doesn't support an $and operator to be wrapped in a $not operator. * &lt;p&gt;" />
      <item value="Creates a criterion using the {@literal $elemMatch} operator" />
      <item value="Creates a 'nor' criteria using the $nor operator for all of the provided criteria. * &lt;p&gt; * Note that mongodb doesn't support an $nor operator to be wrapped in a $not operator. * &lt;p&gt;" />
      <item value="nor Operator" />
      <item value="Criteria" />
      <item value="Creates an 'or' criteria using the $or operator for all of the provided criteria * &lt;p&gt; * Note that mongodb doesn't support an $or operator to be wrapped in a $not operator. * &lt;p&gt;" />
      <item value="Creates an 'or' criteria using the $or operator for all of the provided criteria * &lt;p&gt;" />
      <item value="max Distance" />
      <item value="Creates a geospatial criterion using a {@literal $near} operation." />
      <item value="* Creates a geospatial criterion using a {@literal $geoWithin $centerSphere} operation. This is only available for * Mongo 2.4 and higher." />
      <item value="Creates a criterion using the {@literal $not} meta operator which affects the clause directly following" />
      <item value="reates a criterion using the {@literal $type} operator." />
      <item value="Creates a criterion using the {@literal $type} operator." />
      <item value="Creates a criterion using the {@literal $exists} operator" />
      <item value="Creates a criterion using the {@literal $size} operator." />
      <item value="Creates a criterion using the {@literal $all} operator." />
      <item value="Creates a criterion using the {@literal $mod} operator." />
      <item value="Creates a criterion using the {@literal $ne} operator." />
      <item value="last Operator Was Not" />
      <item value="Static factory method to create a Criteria using the provided key" />
      <item value="Takes a MongoDB JSON string to define the actual query to be executed. This one will take precedence over the * method name then." />
      <item value="akes a MongoDB JSON string to define the actual query to be executed. This one will take precedence over the * method name then." />
      <item value="Defines the fields that should be returned for the given query. Note that only these fields will make it into the * domain object returned." />
      <item value="Returns a copy of this {@link ExampleMatcher} with the specified {@code propertyPaths}. This instance is immutable * and unaffected by this method call." />
      <item value="java.lang.AssertionError: Expecting actual not to be empty" />
      <item value="org.springframework.data.repository.query.ParameterOutOfBoundsException: Invalid parameter index! You seem to have declared too little query method parameters!" />
      <item value="Greater Than Equal" />
      <item value="find User Info Log By User Id Equals And Log Time Greater Than Equal" />
      <item value="Database name must not be empty!" />
      <item value="Unsatisfied dependency expressed through field 'mongoOperations'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'mongoTemplate' defined in class path resource" />
      <item value="Error creating bean with name 'userInfoServiceImpl': Unsatisfied dependency expressed through field 'userInfoLogRepository';" />
      <item value="Constant for default style pattern. Its value is MEDIUM." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="742" />
        <entry key="ENGLISH" value="743" />
        <entry key="GERMAN" value="1" />
        <entry key="FRENCH" value="6" />
        <entry key="GALICIAN" value="1" />
        <entry key="CATALAN" value="1" />
        <entry key="CORSICAN" value="20" />
        <entry key="KURDISH" value="1" />
        <entry key="LATIN" value="2" />
        <entry key="LATVIAN" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="MALAGASY" value="3" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="JAPANESE" value="2" />
        <entry key="SLOVENIAN" value="2" />
        <entry key="CEBUANO" value="1" />
        <entry key="GREEK" value="1" />
        <entry key="ITALIAN" value="1" />
      </map>
    </option>
  </component>
</application>