<application>
  <component name="AppStorage">
    <option name="lastSourceLanguage" value="AUTO" />
    <option name="lastTargetLanguage" value="CHINESE" />
    <histories>
      <item value="INFO org.apache.shiro.session.mgt.AbstractValidatingSessionManager - Enabling session validation schedul" />
      <item value="authenticator Strategy" />
      <item value="AuthenticationToken} instance, &lt;tt&gt;false&lt;/tt&gt; otherwise." />
      <item value="Returns &lt;tt&gt;true&lt;/tt&gt; if this realm wishes to authenticate the Subject represented by the given" />
      <item value="supports" />
      <item value="All Successful Strategy" />
      <item value="[22001][1292] Data truncation: Truncated incorrect DOUBLE value: '2018-04-23 18:45:00'" />
      <item value="user Trd Phase Time" />
      <item value="diff" />
      <item value="datediff" />
      <item value="date sub" />
      <item value="Null ModelAndView returned to DispatcherServlet with name 'springServlet': assuming HandlerAdapter completed request handling" />
      <item value="DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Written [com.yh.ss.common.entites.OperationResult@488b6e3] as &quot;application/json;charset=UTF-8&quot; using [org.springframework.http.converter.json.MappingJackson2HttpMessageConverter@70ee516a]" />
      <item value="read Back End Msg" />
      <item value="business" />
      <item value="business Shop" />
      <item value="set Is Freeze" />
      <item value="Audit Failure Pass Auth" />
      <item value="DEFAULT ENCODE" />
      <item value="increase Integral" />
      <item value="shop User" />
      <item value="platform Income Amount" />
      <item value="integral" />
      <item value="increase Balance" />
      <item value="increase Freeze Balance" />
      <item value="shop Return Money" />
      <item value="cal Shall Actually Return Diff" />
      <item value="took" />
      <item value="Failed" />
      <item value="/** * Retrieves, but does not remove, the head of this queue, * or returns {@code null} if this queue is empty." />
      <item value="Retrieves and removes the head of this queue, * or returns {@code null} if this queue is empty." />
      <item value="Retrieves and removes the head of this queue. This method differs * from {@link #poll poll} only in that it throws an exception if this * queue is empty." />
      <item value="* Returns the number of additional elements that this queue can ideally * (in the absence of memory or resource constraints) accept without * blocking, or {@code Integer.MAX_VALUE} if there is no intrinsic" />
      <item value="Retrieves and removes the head of this queue, waiting up to the * specified wait time if necessary for an element to become available." />
      <item value="Removes a single instance of the specified element from this queue, * if it is present. More formally, removes an element {@code e} such * that {@code o.equals(e)}, if this queue contains one or more such * elements." />
      <item value="* Returns the number of additional elements that this queue can ideally * (in the absence of memory or resource constraints) accept without * blocking, or {@code Integer.MAX_VALUE} if there is no intrinsic * limit." />
      <item value="Returns the number of additional elements that this queue can ideally * (in the absence of memory or resource constraints) accept without * blocking, or {@code Integer.MAX_VALUE} if there is no intrinsic * limit." />
      <item value="Returns the number of additional elements that this queue can ideally * (in the absence of memory or resource constraints) accept without" />
      <item value="Removes a single instance of the specified element from this queue, * if it is present. More formally, removes an element {@code e} such * that {@code o.equals(e)}, if this queue contains one or more such" />
      <item value="Returns the number of additional elements that this queue can ideally" />
      <item value="Retrieves and removes the head of this queue, waiting if necessary * until an element becomes available." />
      <item value="/** * Inserts the specified element into this queue if it is possible to do * so immediately without violating capacity restrictions, returning * {@code true} upon success and {@code false} if no space is currently * available. When using a capacity-restricted queue, this method is * generally preferable to {@link #add}, which can fail to insert an * element only by throwing an exception. * * @param e the element to add * @return {@code true} if the element was added to this queue, else * {@code false} * @throws ClassCastException if the class of the specified element * prevents it from being added to this queue * @throws NullPointerException if the specified element is null * @throws IllegalArgumentException if some property of the specified * element prevents it from being added to this queue" />
      <item value="Not Serializable Exception" />
      <item value="status haveread" />
      <item value="DB Structure" />
      <item value="forward" />
      <item value="Spring Java Injection Points Autowiring Inspection" />
      <item value="instance representing the primitive type" />
      <item value="AUDIT STATE SUCCESS" />
      <item value="AUDIT STATE FAILURE" />
    </histories>
  </component>
</application>