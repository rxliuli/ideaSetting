<application>
  <component name="AppStorage">
    <histories>
      <item value="Returns an infinite sequential ordered {@code Stream} produced by iterative * application of a function {@code f} to an initial element {@code seed}, * producing a {@code Stream} consisting of {@code seed}, {@code f(seed)}, * {@code f(f(seed))}, etc." />
      <item value="the {@code Comparator} used to compare the sort key" />
      <item value="the function used to extract the sort key" />
      <item value="the function used to extract the {@link * Comparable} sort key" />
      <item value="Represents an operation that accepts an object-valued and a * {@code int}-valued argument, and returns no result. This is the * {@code (reference, int)} specialization of {@link BiConsumer}. * Unlike most other functional interfaces, {@code ObjIntConsumer} is * expected to operate via side-effects." />
      <item value="Represents an operation upon two operands of the same type, producing a result * of the same type as the operands. This is a specialization of * {@link BiFunction} for the case where the operands and the result are all of * the same type." />
      <item value="the initial element" />
      <item value="Type parameters of functional interfaces can be specialized to * primitives with additional type prefixes. To specialize the return type * for a type that has both generic return type and generic arguments, we * prefix {@code ToXxx}, as in {@link java.util.function.ToIntFunction}. * Otherwise, type arguments are specialized left-to-right, as in * {@link java.util.function.DoubleConsumer} * or {@link java.util.function.ObjIntConsumer}. * (The type prefix {@code Obj} is used to indicate that we don't want to * specialize this parameter, but want to move on to the next parameter, * as in {@link java.util.function.ObjIntConsumer}.) * These schemes can be combined, as in {@code IntToDoubleFunction}. * &lt;/li&gt;" />
      <item value="Binary Operator" />
      <item value="Represents an operation on a single operand that produces a result of the * same type as its operand. This is a specialization of {@code Function} for * the case where the operand and result are of the same type. *" />
      <item value="There are additional derived function shapes which extend the basic * function shapes, including {@link java.util.function.UnaryOperator} * (extends {@code Function}) and {@link java.util.function.BinaryOperator} * (extends {@code BiFunction})." />
      <item value="Unary Operator" />
      <item value="To Int Function" />
      <item value="&lt;li&gt;There are additional derived function shapes which extend the basic * function shapes, including {@link java.util.function.UnaryOperator} * (extends {@code Function}) and {@link java.util.function.BinaryOperator} * (extends {@code BiFunction}). * &lt;/li&gt;" />
      <item value="(binary function from {@code T} and" />
      <item value="nilary" />
      <item value="(nilary function to {@code R})." />
      <item value="(unary function from {@code T} to {@code boolean})," />
      <item value="(unary function from {@code T} to {@code void})," />
      <item value="(unary function from {@code T} to {@code R})," />
      <item value="Function" />
      <item value="Functional Interface" />
      <item value="&lt;em&gt;Functional interfaces&lt;/em&gt; provide target types for lambda expressions * and method references. Each functional interface has a single abstract * method, called the &lt;em&gt;functional method&lt;/em&gt; for that functional interface, * to which the lambda expression's parameter and return types are matched or * adapted. Functional interfaces can provide a target type in multiple * contexts, such as assignment context, method invocation, or cast context: *" />
      <item value="Copyright (c) 2011, 2013, Oracle and/or its affiliates. All rights reserved. * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER. * * This code is free software; you can redistribute it and/or modify it * under the terms of the GNU General Public License version 2 only, as * published by the Free Software Foundation. Oracle designates this * particular file as subject to the &quot;Classpath&quot; exception as provided * by Oracle in the LICENSE file that accompanied this code. * * This code is distributed in the hope that it will be useful, but WITHOUT * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License * version 2 for more details (a copy is included in the LICENSE file that * accompanied this code). * * You should have received a copy of the GNU General Public License version * 2 along with this work; if not, write to the Free Software Foundation, * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA. * * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA * or visit www.oracle.com if you need additional information or have any * questions." />
      <item value="separate File Path" />
      <item value="spearate File Path" />
      <item value="Returns the integer value of the reply code of the last FTP reply. * You will usually only use this method after you connect to the * FTP server to check that the connection was successful since * &lt;code&gt; connect &lt;/code&gt; is of type void." />
      <item value="The integer value of the reply code of the last FTP reply." />
      <item value="* Tests if this input stream supports the &lt;code&gt;mark&lt;/code&gt; and * &lt;code&gt;reset&lt;/code&gt; methods. Whether or not &lt;code&gt;mark&lt;/code&gt; and * &lt;code&gt;reset&lt;/code&gt; are supported is an invariant property of a * particular input stream instance. The &lt;code&gt;markSupported&lt;/code&gt; method * of &lt;code&gt;InputStream&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;." />
      <item value="mark Supported" />
      <item value="IOException caught while copying." />
      <item value="Software caused connection abort: socket write error" />
      <item value="The name to give the remote file." />
      <item value="Stores a file on the server using the given name and taking input * from the given InputStream. This method does NOT close the given * InputStream. If the current file type is ASCII, line separators in * the file are transparently converted to the NETASCII format (i.e., * you should not attempt to create a special InputStream to do this)" />
      <item value="java.net.ConnectException: Connection refused: connect" />
      <item value="Injection of autowired dependencies failed; nested exception is java.lang.IllegalStateException: TypeExcludeFilter class org.springframework.boot.test.context.filter.TestTypeExcludeFilter has not implemented equals" />
      <item value="Issue the FTP STAT command to the server. * &lt;p&gt; * @return The status information returned by the server. * @exception FTPConnectionClosedException * If the FTP server prematurely closes the connection as a result * of the client being idle or some other reason causing the server * to send FTP reply code 421. This exception may be caught either * as an IOException or independently as itself." />
      <item value="The integer value of the reply code of the fetched FTP reply." />
      <item value="Only use this * method if you are implementing your own FTP client or if you need to * fetch a secondary response from the FTP server." />
      <item value="Fetches a reply from the FTP server and returns the integer reply * code. After calling this method, the actual reply text can be accessed * from either calling {@link #getReplyString getReplyString } or" />
      <item value="Issue the FTP STAT command to the server for a given pathname. This * should produce a listing of the file or directory." />
      <item value="&lt;p&gt;No delimiter is added before or after the list. * {@code null} elements and separator are treated as empty Strings (&quot;&quot;).&lt;/p&gt;" />
      <item value="Joins the elements of the provided varargs into a * single String containing the provided elements.&lt;/p&gt;" />
      <item value="Seporator" />
      <item value="Create a new {@code BeanDefinitionBuilder} used to construct a {@link GenericBeanDefinition}. * @param beanClass the {@code Class} of the bean that the definition is being created for" />
      <item value="Create a new {@code BeanDefinitionBuilder} used to construct a {@link GenericBeanDefinition}." />
      <item value="generic Bean Definition" />
      <item value="Implementation of BeanDefinitionRegistry interface" />
      <item value="register Bean Definition" />
      <item value="get Bean Definition" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="432" />
        <entry key="ENGLISH" value="433" />
        <entry key="GERMAN" value="1" />
        <entry key="FRENCH" value="1" />
        <entry key="GALICIAN" value="1" />
        <entry key="CATALAN" value="1" />
        <entry key="CORSICAN" value="20" />
        <entry key="KURDISH" value="1" />
        <entry key="LATVIAN" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="MALAGASY" value="3" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="JAPANESE" value="2" />
        <entry key="SLOVENIAN" value="1" />
        <entry key="CEBUANO" value="1" />
        <entry key="GREEK" value="1" />
        <entry key="ITALIAN" value="1" />
      </map>
    </option>
  </component>
</application>