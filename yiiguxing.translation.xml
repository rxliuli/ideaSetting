<application>
  <component name="AppStorage">
    <histories>
      <item value="A {@code TimeUnit} represents time durations at a given unit of * granularity and provides utility methods to convert across units, * and to perform timing and delay operations in these units. A * {@code TimeUnit} does not maintain time information, but only * helps organize and use time representations that may be maintained * separately across various contexts. A nanosecond is defined as one * thousandth of a microsecond, a microsecond as one thousandth of a * millisecond, a millisecond as one thousandth of a second, a minute * as sixty seconds, an hour as sixty minutes, and a day as twenty four * hours." />
      <item value="check Valid Int Value" />
      <item value="the delay between the termination of one * execution and the commencement of the next" />
      <item value="initial Delay" />
      <item value="delay" />
      <item value="the time to delay first execution" />
      <item value="* Creates and executes a periodic action that becomes enabled first * after the given initial delay, and subsequently with the given * period; that is executions will commence after * {@code initialDelay} then {@code initialDelay+period}, then * {@code initialDelay + 2 * period}, and so on. * If any execution of the task * encounters an exception, subsequent executions are suppressed. * Otherwise, the task will only terminate via cancellation or * termination of the executor. If any execution of this task * takes longer than its period, then subsequent executions * may start late, but will not concurrently execute." />
      <item value="Creates and executes a periodic action that becomes enabled first * after the given initial delay, and subsequently with the * given delay between the termination of one execution and the * commencement of the next. If any execution of the task * encounters an exception, subsequent executions are suppressed. * Otherwise, the task will only terminate via cancellation or * termination of the executor." />
      <item value="schedule With Fixed Delay" />
      <item value="schedule At Fixed Rate" />
      <item value="Static convenience methods for JavaBeans: for instantiating beans, * checking bean property types, copying bean properties, etc. * * &lt;p&gt;Mainly for use within the framework, but to some degree also * useful for application classes." />
      <item value="delete" />
      <item value="Create" />
      <item value="cloning" />
      <item value="listener" />
      <item value="监听函数" />
      <item value="监听" />
      <item value="watch" />
      <item value="watch Fn" />
      <item value="Instances of this class are used to find the current instant, which can be * interpreted using the stored time-zone to find the current date and time. * As such, a clock can be used instead of {@link System#currentTimeMillis()} * and {@link TimeZone#getDefault()}." />
      <item value="A clock providing access to the current instant, date and time using a time-zone." />
      <item value="url Instruction Service" />
      <item value="unblock Domains Test" />
      <item value="Unsatisfied dependency expressed through field" />
      <item value="Consider the following: If you want an embedded database (H2, HSQL or Derby), please put it on the classpath. If you have database settings to be loaded from a particular profile you may need to activate it (no profiles are currently active)." />
      <item value="Reason: Failed to determine a suitable driver class" />
      <item value="The web application [ROOT] appears to have started a thread named [Abandoned connection cleanup thread] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:" />
      <item value="ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'logQueryControllerImpl': Unsatisfied dependency expressed through field 'logQueryService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'logQueryServiceImpl': Unsatisfied dependency expressed through field 'baseMapper'; nested exception is org.springframework.beans.factory" />
      <item value="Returns a sequential ordered stream whose elements are the specified values." />
      <item value="a {@code Spliterator.OfInt} describing the stream elements" />
      <item value="The spliterator is only traversed, split, or queried for estimated size * after the terminal operation of the stream pipeline commences." />
      <item value="Creates a new sequential or parallel {@code IntStream} from a * {@code Spliterator.OfInt}." />
      <item value="Returns an infinite sequential unordered stream where each element is * generated by the provided {@code Supplier}. This is suitable for * generating constant streams, streams of random elements, etc." />
      <item value="org.junit.ComparisonFailure: Expected :100L&#10;Actual :1L" />
      <item value="defined in class path resource [com/zx/idc/common/ftp/FtpSpringConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.zx.idc.common.ftp.FtpOperator]: Factory method 'basicFtpOperator' threw exception; nested exception is java.lang.RuntimeException: ftp operator create failed, config is null" />
      <item value="ftp operator create failed, config is null" />
      <item value="java.lang.IllegalStateException: Failed to load ApplicationContext" />
      <item value="Initial Bean sftpOperator failed, basic ftp client config is null!" />
      <item value="Initial Bean basicFtpOperator failed, basic ftp client config is null!" />
      <item value="Caught exception while allowing TestExecutionListener [org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@1cf56a1c] to prepare test instance [com.zx.idc.ds.base.cus.service.IBaseCustomerServiceTest@651aed93]" />
      <item value="Factory method 'basicFtpOperator' threw exception; nested exception is java.lang.RuntimeException: ftp operator create failed, config is null" />
      <item value="java.lang.IllegalStateException: Unable to find a @SpringBootConfiguration, you need to use @ContextConfiguration or @SpringBootTest(classes=...) with your test" />
      <item value="exists By Id" />
      <item value="Returns an array containing {@code Method} objects reflecting all the * public methods of the class or interface represented by this {@code * Class} object, including those declared by the class or interface and * those inherited from superclasses and superinterfaces." />
      <item value="Returns an array containing {@code Method} objects reflecting all the * declared methods of the class or interface represented by this {@code * Class} object, including public, protected, default (package) * access, and private methods, but excluding inherited methods." />
      <item value="get Declared Methods" />
      <item value="Returns an array of {@code Field} objects reflecting all the fields * declared by the class or interface represented by this * {@code Class} object. This includes public, protected, default * (package) access, and private fields, but excludes inherited fields." />
      <item value="get Declared Fields" />
      <item value="c.z.i.common.ftp.sftp.SftpSpringConfig : Read the sftp configuration exception, read the configuration: username null, host null, password null, port: Optional.empty, strictHostKeyChecking Optional.empty, encoding, Optional.empty" />
      <item value="Deprecated" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="529" />
        <entry key="ENGLISH" value="530" />
        <entry key="GERMAN" value="1" />
        <entry key="FRENCH" value="1" />
        <entry key="GALICIAN" value="1" />
        <entry key="CATALAN" value="1" />
        <entry key="CORSICAN" value="20" />
        <entry key="KURDISH" value="1" />
        <entry key="LATVIAN" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="MALAGASY" value="3" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="JAPANESE" value="2" />
        <entry key="SLOVENIAN" value="1" />
        <entry key="CEBUANO" value="1" />
        <entry key="GREEK" value="1" />
        <entry key="ITALIAN" value="1" />
      </map>
    </option>
  </component>
</application>