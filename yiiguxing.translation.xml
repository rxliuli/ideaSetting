<application>
  <component name="AppStorage">
    <histories>
      <item value="Error attempting to get column 'NAME' from result set" />
      <item value="org.springframework.dao.DataIntegrityViolationException: Error attempting to get column 'NAME' from result set. Cause: org.h2.jdbc.JdbcSQLException: Data conversion error converting &quot;高能物理&quot; [22018-197]&#10;; SQL []; Data conversion error converting &quot;高能物理&quot; [22018-197]; nested exception is org.h2.jdbc.JdbcSQLException: Data conversion error converting &quot;高能物理&quot; [22018-197]" />
      <item value="select Recursive" />
      <item value="递归" />
      <item value="select Recivesive" />
      <item value="salt" />
      <item value="key whose mapping is to be removed from the map" />
      <item value="if the key is of an inappropriate type for * this map" />
      <item value="if the &lt;tt&gt;remove&lt;/tt&gt; operation * is not supported by this map" />
      <item value="if the specified key is null and this * map does not permit null keys" />
      <item value="rollup" />
      <item value="exam" />
      <item value="成绩" />
      <item value="科目" />
      <item value="Removes the mapping for a key from this map if it is present * (optional operation). More formally, if this map contains a mapping * from key &lt;tt&gt;k&lt;/tt&gt; to value &lt;tt&gt;v&lt;/tt&gt; such that * &lt;code&gt;(key==null ? k==null : key.equals(k))&lt;/code&gt;, that mapping * is removed. (The map can contain at most one such mapping.)" />
      <item value="An optionally-bounded {@linkplain BlockingDeque blocking deque} based on * linked nodes." />
      <item value="The result type returned by this Future's {@code get} method" />
      <item value="Attempts to cancel execution of this task. This attempt will * fail if the task has already completed, has already been cancelled, * or could not be cancelled for some other reason. If successful, * and this task has not started when {@code cancel} is called, * this task should never run. If the task has already started, * then the {@code mayInterruptIfRunning} parameter determines * whether the thread executing this task should be interrupted in * an attempt to stop the task." />
      <item value="if the thread executing this * task should be interrupted; otherwise, in-progress tasks are allowed * to complete" />
      <item value="additional nanoseconds to sleep" />
      <item value="Sometimes several tests need to share computationally expensive setup * (like logging into a database). While this can compromise the independence of * tests, sometimes it is a necessary optimization. Annotating a &lt;code&gt;public static void&lt;/code&gt; no-arg method * with &lt;code&gt;@BeforeClass&lt;/code&gt; causes it to be run once before any of * the test methods in the class. The &lt;code&gt;@BeforeClass&lt;/code&gt; methods of superclasses * will be run before those of the current class, unless they are shadowed in the current class. * &lt;p&gt;" />
      <item value="Waits if necessary for at most the given time for the computation * to complete, and then retrieves its result, if available." />
      <item value="Waits if necessary for the computation to complete, and then * retrieves its result." />
      <item value="* &lt;p&gt;After this method returns, subsequent calls to {@link #isDone} will * always return {@code true}. Subsequent calls to {@link #isCancelled} * will always return {@code true} if this method returned {@code true}." />
      <item value="&lt;p&gt;After this method returns, subsequent calls to {@link #isDone} will * always return {@code true}. Subsequent calls to {@link #isCancelled} * will always return {@code true} if this method returned {@code true}." />
      <item value="an attempt to stop the task." />
      <item value="Delayed" />
      <item value="Expecting actual not to be null" />
      <item value="Creates and executes a periodic action that becomes enabled first * after the given initial delay, and subsequently with the * given delay between the termination of one execution and the * commencement of the next. If any execution of the task * encounters an exception, subsequent executions are suppressed. * Otherwise, the task will only terminate via cancellation or * termination of the executor." />
      <item value="If any execution of the task * encounters an exception, subsequent executions are suppressed. * Otherwise, the task will only terminate via cancellation or * termination of the executor. If any execution of this task * takes longer than its period, then subsequent executions * may start late, but will not concurrently execute." />
      <item value="may start late, but will not concurrently execute." />
      <item value="and subsequently with the given * period; that is executions will commence after" />
      <item value="Creates and executes a periodic action that becomes enabled first * after the given initial delay," />
      <item value="first" />
      <item value="periodic" />
      <item value="Creates and executes a ScheduledFuture that becomes enabled after the * given delay." />
      <item value="Creates and executes a one-shot action that becomes enabled * after the given delay." />
      <item value="schedule With Fixed Delay" />
      <item value="schedule At Fixed Rate" />
      <item value="Scheduled Executor Service" />
      <item value="A delayed result-bearing action that can be cancelled. * Usually a scheduled future is the result of scheduling * a task with a {@link ScheduledExecutorService}." />
      <item value="A delayed result-bearing action that can be cancelled. * Usually a scheduled future is the result of scheduling" />
      <item value="set Daemon" />
      <item value="the number of threads to keep in the pool, * even if they are idle" />
      <item value="通知" />
      <item value="Invalid character found in method name. HTTP method names must be tokens" />
      <item value="Failed to unregister the JMX name: org.apache.commons.dbcp2:name=dataSource,type=BasicDataSource" />
      <item value="duration" />
      <item value="Invocation of init method failed; nested exception is" />
      <item value="public com.rxliuli.interview.user.server.interviewuserserver.common.res.Result com.rxliuli.interview.user.server.interviewuserserver.module.exam.web.ExamTopicApi.list(java.lang.Long)" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="144" />
        <entry key="ENGLISH" value="146" />
        <entry key="FRENCH" value="1" />
        <entry key="CORSICAN" value="20" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="JAPANESE" value="2" />
        <entry key="GREEK" value="1" />
      </map>
    </option>
  </component>
</application>